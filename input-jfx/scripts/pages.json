[{"name":"abstract operator fun invoke(event: T): Action?","description":"dev.kkorolyov.pancake.input.jfx.Reaction.invoke","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/invoke.html","searchKeys":["invoke","abstract operator fun invoke(event: T): Action?","dev.kkorolyov.pancake.input.jfx.Reaction.invoke"]},{"name":"class Compensated<T>(value: T, compensating: T)","description":"dev.kkorolyov.pancake.input.jfx.Compensated","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-compensated/index.html","searchKeys":["Compensated","class Compensated<T>(value: T, compensating: T)","dev.kkorolyov.pancake.input.jfx.Compensated"]},{"name":"class Input(delegate: Reaction<InputEvent>) : Component, Reaction<InputEvent> ","description":"dev.kkorolyov.pancake.input.jfx.component.Input","location":"input-jfx/dev.kkorolyov.pancake.input.jfx.component/-input/index.html","searchKeys":["Input","class Input(delegate: Reaction<InputEvent>) : Component, Reaction<InputEvent> ","dev.kkorolyov.pancake.input.jfx.component.Input"]},{"name":"class InputSystem(inputNodes: Iterable<Node>) : GameSystem","description":"dev.kkorolyov.pancake.input.jfx.system.InputSystem","location":"input-jfx/dev.kkorolyov.pancake.input.jfx.system/-input-system/index.html","searchKeys":["InputSystem","class InputSystem(inputNodes: Iterable<Node>) : GameSystem","dev.kkorolyov.pancake.input.jfx.system.InputSystem"]},{"name":"fun <T : InputEvent> filter(test: (T) -> Boolean, delegate: Reaction<in T>): Reaction<T>","description":"dev.kkorolyov.pancake.input.jfx.Reaction.Companion.filter","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/-companion/filter.html","searchKeys":["filter","fun <T : InputEvent> filter(test: (T) -> Boolean, delegate: Reaction<in T>): Reaction<T>","dev.kkorolyov.pancake.input.jfx.Reaction.Companion.filter"]},{"name":"fun <T : InputEvent> first(vararg delegates: Reaction<in T>): Reaction<T>","description":"dev.kkorolyov.pancake.input.jfx.Reaction.Companion.first","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/-companion/first.html","searchKeys":["first","fun <T : InputEvent> first(vararg delegates: Reaction<in T>): Reaction<T>","dev.kkorolyov.pancake.input.jfx.Reaction.Companion.first"]},{"name":"fun <T> Compensated(value: T, compensating: T)","description":"dev.kkorolyov.pancake.input.jfx.Compensated.Compensated","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-compensated/-compensated.html","searchKeys":["Compensated","fun <T> Compensated(value: T, compensating: T)","dev.kkorolyov.pancake.input.jfx.Compensated.Compensated"]},{"name":"fun Input(delegate: Reaction<InputEvent>)","description":"dev.kkorolyov.pancake.input.jfx.component.Input.Input","location":"input-jfx/dev.kkorolyov.pancake.input.jfx.component/-input/-input.html","searchKeys":["Input","fun Input(delegate: Reaction<InputEvent>)","dev.kkorolyov.pancake.input.jfx.component.Input.Input"]},{"name":"fun InputSystem(inputNodes: Iterable<Node>)","description":"dev.kkorolyov.pancake.input.jfx.system.InputSystem.InputSystem","location":"input-jfx/dev.kkorolyov.pancake.input.jfx.system/-input-system/-input-system.html","searchKeys":["InputSystem","fun InputSystem(inputNodes: Iterable<Node>)","dev.kkorolyov.pancake.input.jfx.system.InputSystem.InputSystem"]},{"name":"fun compensate(): T?","description":"dev.kkorolyov.pancake.input.jfx.Compensated.compensate","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-compensated/compensate.html","searchKeys":["compensate","fun compensate(): T?","dev.kkorolyov.pancake.input.jfx.Compensated.compensate"]},{"name":"fun get(): T?","description":"dev.kkorolyov.pancake.input.jfx.Compensated.get","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-compensated/get.html","searchKeys":["get","fun get(): T?","dev.kkorolyov.pancake.input.jfx.Compensated.get"]},{"name":"fun keyToggle(compensated: Compensated<Action>): Reaction<KeyEvent>","description":"dev.kkorolyov.pancake.input.jfx.Reaction.Companion.keyToggle","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/-companion/key-toggle.html","searchKeys":["keyToggle","fun keyToggle(compensated: Compensated<Action>): Reaction<KeyEvent>","dev.kkorolyov.pancake.input.jfx.Reaction.Companion.keyToggle"]},{"name":"fun mouseToggle(compensated: Compensated<Action>): Reaction<MouseEvent>","description":"dev.kkorolyov.pancake.input.jfx.Reaction.Companion.mouseToggle","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/-companion/mouse-toggle.html","searchKeys":["mouseToggle","fun mouseToggle(compensated: Compensated<Action>): Reaction<MouseEvent>","dev.kkorolyov.pancake.input.jfx.Reaction.Companion.mouseToggle"]},{"name":"fun whenCode(vararg branches: Pair<KeyCode, Reaction<in KeyEvent>>): Reaction<KeyEvent>","description":"dev.kkorolyov.pancake.input.jfx.Reaction.Companion.whenCode","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/-companion/when-code.html","searchKeys":["whenCode","fun whenCode(vararg branches: Pair<KeyCode, Reaction<in KeyEvent>>): Reaction<KeyEvent>","dev.kkorolyov.pancake.input.jfx.Reaction.Companion.whenCode"]},{"name":"inline fun <T : InputEvent> matchType(delegate: Reaction<in T>): Reaction<InputEvent>","description":"dev.kkorolyov.pancake.input.jfx.Reaction.Companion.matchType","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/-companion/match-type.html","searchKeys":["matchType","inline fun <T : InputEvent> matchType(delegate: Reaction<in T>): Reaction<InputEvent>","dev.kkorolyov.pancake.input.jfx.Reaction.Companion.matchType"]},{"name":"inline operator fun <T : InputEvent> invoke(crossinline op: (T) -> Action?): Reaction<T>","description":"dev.kkorolyov.pancake.input.jfx.Reaction.Companion.invoke","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/-companion/invoke.html","searchKeys":["invoke","inline operator fun <T : InputEvent> invoke(crossinline op: (T) -> Action?): Reaction<T>","dev.kkorolyov.pancake.input.jfx.Reaction.Companion.invoke"]},{"name":"interface Reaction<T : InputEvent>","description":"dev.kkorolyov.pancake.input.jfx.Reaction","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/index.html","searchKeys":["Reaction","interface Reaction<T : InputEvent>","dev.kkorolyov.pancake.input.jfx.Reaction"]},{"name":"object Companion","description":"dev.kkorolyov.pancake.input.jfx.Reaction.Companion","location":"input-jfx/dev.kkorolyov.pancake.input.jfx/-reaction/-companion/index.html","searchKeys":["Companion","object Companion","dev.kkorolyov.pancake.input.jfx.Reaction.Companion"]},{"name":"open override fun after(dt: Long)","description":"dev.kkorolyov.pancake.input.jfx.system.InputSystem.after","location":"input-jfx/dev.kkorolyov.pancake.input.jfx.system/-input-system/after.html","searchKeys":["after","open override fun after(dt: Long)","dev.kkorolyov.pancake.input.jfx.system.InputSystem.after"]},{"name":"open override fun before(dt: Long)","description":"dev.kkorolyov.pancake.input.jfx.system.InputSystem.before","location":"input-jfx/dev.kkorolyov.pancake.input.jfx.system/-input-system/before.html","searchKeys":["before","open override fun before(dt: Long)","dev.kkorolyov.pancake.input.jfx.system.InputSystem.before"]},{"name":"open override fun update(entity: Entity, dt: Long)","description":"dev.kkorolyov.pancake.input.jfx.system.InputSystem.update","location":"input-jfx/dev.kkorolyov.pancake.input.jfx.system/-input-system/update.html","searchKeys":["update","open override fun update(entity: Entity, dt: Long)","dev.kkorolyov.pancake.input.jfx.system.InputSystem.update"]}]
